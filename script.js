document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll('section, .card, header, h1, h2');
    elements.forEach((el, index) => {
        el.style.opacity = '0';
        setTimeout(() => {
            el.classList.add('initial-animate', 'fade-in-up', `delay-${(index % 5 + 1) * 100}`);
        }, 100);
    });

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const themeToggle = document.getElementById('themeToggle');
    const uaLang = document.getElementById('uaLang');
    const enLang = document.getElementById('enLang');

    if (themeToggle) themeToggle.addEventListener('click', toggleTheme);
    if (uaLang) uaLang.addEventListener('click', () => changeLang('ua'));
    if (enLang) enLang.addEventListener('click', () => changeLang('en'));

    // –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –º–æ–≤—É —Ç–∞ —Ç–µ–º—É
    const savedLang = localStorage.getItem('language') || 'ua';
    changeLang(savedLang);

    const savedTheme = localStorage.getItem('theme') || 'light';
    if (savedTheme === 'dark') toggleTheme();
});

ScrollReveal().reveal('[data-sr-id]', {
    distance: '80px',
    duration: 1500,
    easing: 'ease-in-out',
    origin: 'bottom',
    interval: 300,
    reset: true
});

function toggleTheme() {
    const x = event.clientX;
    const y = event.clientY;
    const transition = document.createElement('div');
    
    transition.className = 'theme-transition';
    transition.style.setProperty('--x', x + 'px');
    transition.style.setProperty('--y', y + 'px');
    transition.style.background = 
        document.body.classList.contains('dark-theme') 
            ? 'radial-gradient(circle, #ffffff, #f3f4f6)'
            : 'radial-gradient(circle, #1a1a1a, #000000)';
    
    document.body.appendChild(transition);
    requestAnimationFrame(() => transition.classList.add('active'));
    
    setTimeout(() => {
        const body = document.body;
        const isDark = body.classList.toggle('dark-theme');
        body.classList.toggle('light-theme', !isDark);

        document.querySelectorAll('.card, .shine, .video-placeholder').forEach(el => {
            el.classList.toggle('dark-theme', isDark);
            el.classList.toggle('light-theme', !isDark);
        });

        document.querySelectorAll('p, h1, h2, h3, span').forEach(el => {
            el.style.color = isDark ? '#e0e0e0' : '#000000';
        });

        const header = document.getElementById('site-header');
        header.style.background = isDark ? '#121212' : '#ffffff';
        header.style.borderBottom = isDark ? '1px solid #2c2c2c' : '1px solid rgba(0, 0, 0, 0.1)';
        header.style.boxShadow = isDark ? '0 4px 6px rgba(0, 0, 0, 0.5)' : '';

        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        transition.remove();

        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –º–æ–≤—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ç–µ–º–∏
        const savedLang = localStorage.getItem('language') || 'ua';
        changeLang(savedLang);
    }, 1000);
}

// Enhanced scroll handling for header
let lastScrollY = 0;
let ticking = false;
const header = document.getElementById('site-header');

function updateHeader() {
    const currentScrollY = window.scrollY;
    
    if (currentScrollY > lastScrollY && currentScrollY > 50) {
        header.classList.add('hidden');
    } else if (currentScrollY < lastScrollY) {
        header.classList.remove('hidden');
    }
    
    lastScrollY = currentScrollY;
    ticking = false;
}

window.addEventListener('scroll', () => {
    if (!ticking) {
        window.requestAnimationFrame(() => {
            updateHeader();
            ticking = false;
        });
        ticking = true;
    }
});

document.querySelectorAll('.card').forEach(card => {
    card.classList.add('glow-effect');
});

document.querySelectorAll('h2').forEach(h2 => {
    h2.classList.add('gradient-text');
});

window.addEventListener('scroll', () => {
    const scrolled = window.pageYOffset;
    document.querySelectorAll('.parallax').forEach(elem => {
        const speed = 0.5;
        elem.style.transform = `translateY(${scrolled * speed}px)`;
    });
});

ScrollReveal().reveal('.card', {
    distance: '50px',
    duration: 1500,
    origin: 'bottom',
    interval: 200,
    scale: 0.3,
    cleanup: true,
    reset: true
});

document.querySelectorAll('section').forEach(section => {
    if (!section.classList.contains('parallax')) {
        section.classList.add('hover-glow');
    }
});

document.querySelectorAll('h2, h3').forEach(heading => {
    heading.classList.add('hover-scale');
});

document.querySelectorAll('img').forEach(img => {
    img.classList.add('hover-bright');
});

document.querySelectorAll('.card').forEach(card => {
    card.classList.add('hover-glow');
});

const parallaxElements = document.querySelectorAll('.parallax-item');
let parallaxTicking = false;

window.addEventListener('scroll', () => {
    if (!parallaxTicking) {
        window.requestAnimationFrame(() => {
            parallaxElements.forEach(element => {
                const speed = element.dataset.speed || 0.5;
                const rect = element.getBoundingClientRect();
                const scrolled = window.pageYOffset;
                
                if (rect.top < window.innerHeight && rect.bottom > 0) {
                    const yPos = -(scrolled * speed);
                    element.style.transform = `translate3d(0, ${yPos}px, 0)`;
                }
            });
            parallaxTicking = false;
        });
        parallaxTicking = true;
    }
});

function checkMobile() {
    if (window.innerWidth <= 768) {
        document.querySelectorAll('.parallax').forEach(el => {
            el.style.backgroundAttachment = 'scroll';
        });
    }
}

window.addEventListener('resize', checkMobile);
checkMobile();

const translations = {
    ua: {
        title: "–ó–±–µ—Ä–µ–∂—ñ–º–æ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏",
        mainHeading: "–ó–±–µ—Ä–µ–∂—ñ–º–æ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏!",
        subHeading: "–ö–æ–∂–Ω–∞ –∫–≤—ñ—Ç–∫–∞ ‚Äî —Ü–µ –¥–æ—Ç–∏–∫ –¥–æ —Ç–≤–æ—Ä—ñ–Ω–Ω—è –ë–æ–∂–æ–≥–æ üå∏",
        saveMessage: "–ù–µ –∑—Ä–∏–≤–∞–π ‚Äî –∑–±–µ—Ä–µ–∂–∏!",
        whyImportant: "–ß–æ–º—É –≤–∞–∂–ª–∏–≤–æ –±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏?",
        mainText1: "–ü–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ ‚Äî —Ü–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥–∞—Ä–Ω—ñ –∫–≤—ñ—Ç–∏, —Ü–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–≤–æ—Ä—ñ–Ω–Ω—è –ë–æ–∂—ñ, —è–∫—ñ –∑'—è–≤–ª—è—é—Ç—å—Å—è –ø–µ—Ä—à–∏–º–∏ –ø—ñ—Å–ª—è –¥–æ–≤–≥–æ—ó –∑–∏–º–∏. –í–æ–Ω–∏ –æ—á–∏—â–∞—é—Ç—å –ø–æ–≤—ñ—Ç—Ä—è, –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –µ–∫–æ—Å–∏—Å—Ç–µ–º—É —ñ —Ä–∞–¥—É—é—Ç—å –Ω–∞—à –∑—ñ—Ä. –¢–∞ —á–µ—Ä–µ–∑ –∂–∞–¥—ñ–±–Ω—ñ—Å—Ç—å —ñ –±–∞–π–¥—É–∂—ñ—Å—Ç—å –ª—é–¥–µ–π —Ü—ñ –∫–≤—ñ—Ç–∏ –æ–ø–∏–Ω–∏–ª–∏—Å—å –Ω–∞ –º–µ–∂—ñ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è.",
        mainText2: "–Ø–∫—â–æ –º–∏ –Ω–µ –±—É–¥–µ–º–æ –¥—ñ—è—Ç–∏ –∑–∞—Ä–∞–∑, —Ü—ñ –Ω—ñ–∂–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤–µ—Å–Ω–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –ª–∏—à–µ –Ω–∞ —Ñ–æ—Ç–æ. –ù–µ –∫—É–ø—É–π —ñ –Ω–µ –∑—Ä–∏–≤–∞–π –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ ‚Äî –∫—Ä–∞—â–µ –ø–æ–º–∏–ª—É–π—Å—è –Ω–∏–º–∏ –≤ –ø—Ä–∏—Ä–æ–¥—ñ. –ó–±–µ—Ä–µ–∂—ñ–º–æ –ë–æ–∂—É –∫—Ä–∞—Å—É —Ä–∞–∑–æ–º!",
        benefits: "–Ø–∫–∞ –∫–æ—Ä–∏—Å—Ç—å –≤—ñ–¥ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç—ñ–≤?",
        forEcosystem: "–î–ª—è –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏ üåø",
        ecosystemText: "–ü–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ —î –≤–∞–∂–ª–∏–≤–∏–º –¥–∂–µ—Ä–µ–ª–æ–º –Ω–µ–∫—Ç–∞—Ä—É –¥–ª—è –ø–µ—Ä—à–∏—Ö –≤–µ—Å–Ω—è–Ω–∏—Ö –∫–æ–º–∞—Ö, –æ—Å–æ–±–ª–∏–≤–æ –±–¥–∂—ñ–ª. –í–æ–Ω–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏ –ø—ñ—Å–ª—è –∑–∏–º–∏.",
        forHealth: "–î–ª—è –∑–¥–æ—Ä–æ–≤'—è üå±",
        healthText: "–ë–∞–≥–∞—Ç–æ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç—ñ–≤ –º–∞—é—Ç—å –ª—ñ–∫—É–≤–∞–ª—å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—ñ–¥—Å–Ω—ñ–∂–Ω–∏–∫–∏ –º—ñ—Å—Ç—è—Ç—å —Ä–µ—á–æ–≤–∏–Ω–∏, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —É –º–µ–¥–∏—Ü–∏–Ω—ñ.",
        forSoil: "–î–ª—è “ë—Ä—É–Ω—Ç—É üåç",
        soilText: "–ü–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —É—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–æ–ª–æ–≥—É –≤ “ë—Ä—É–Ω—Ç—ñ —Ç–∞ –∑–∞—Ö–∏—â–∞—é—Ç—å –π–æ–≥–æ –≤—ñ–¥ –µ—Ä–æ–∑—ñ—ó –ø—ñ—Å–ª—è —Ç–∞–Ω–µ–Ω–Ω—è —Å–Ω—ñ–≥—É.",
        forSoul: "–î–ª—è –¥—É—à—ñ üíö",
        soulText: "–¶—ñ –∫–≤—ñ—Ç–∏ –¥–∞—Ä—É—é—Ç—å –Ω–∞–º –ø–µ—Ä—à—É –≤–µ—Å–Ω—è–Ω—É –∫—Ä–∞—Å—É, –ø—ñ–¥–Ω—ñ–º–∞—é—Ç—å –Ω–∞—Å—Ç—Ä—ñ–π —Ç–∞ –Ω–∞–≥–∞–¥—É—é—Ç—å –ø—Ä–æ –≤—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏—Ä–æ–¥–∏.",
        snowdrop: "–ü—ñ–¥—Å–Ω—ñ–∂–Ω–∏–∫",
        snowdropText: "–°–∏–º–≤–æ–ª —á–∏—Å—Ç–æ—Ç–∏ –π –Ω–∞–¥—ñ—ó. –û–¥–∏–Ω —ñ–∑ –ø–µ—Ä—à–∏—Ö –≤—ñ—Å–Ω–∏–∫—ñ–≤ –≤–µ—Å–Ω–∏.",
        winterAconite: "–ó–∏–º–æ–≤–∏–∫",
        winterAconiteText: "–†—ñ–¥–∫—ñ—Å–Ω–∏–π –∂–æ–≤—Ç–∏–π –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç, —è–∫–∏–π —Ä–æ–∑—Ü–≤—ñ—Ç–∞—î —â–µ –≤ —Å–Ω—ñ–≥—É.",
        liverleaf: "–ü–µ—á—ñ–Ω–æ—á–Ω–∏—Ü—è",
        liverleafText: "–ù—ñ–∂–Ω–∞ –ª—ñ—Å–æ–≤–∞ –∫–≤—ñ—Ç–∫–∞, —è–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞—à–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É.",
        video: "–í—ñ–¥–µ–æ –ø—Ä–æ –∫—Ä–∞—Å—É –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç—ñ–≤",
        videoPlaceholder: "–¢—É—Ç –±—É–¥–µ –≤—ñ–¥–µ–æ, —è–∫–µ –≤—Å—Ç–∞–≤–∏—Ç—å –°–µ—Ä–≥—ñ–π–∫–æ üé•",
        changeTheme: "üåó –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É",
        footer: "¬© 2025 –ó–±–µ—Ä–µ–∂—ñ–º–æ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ üå∑ –ó –ª—é–±–æ–≤'—é –¥–æ –ø—Ä–∏—Ä–æ–¥–∏ —ñ –ë–æ–≥–∞ üíö",
        poem: {
            title: "–ü–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏",
            text: [
                "–ü–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ ‚Äî –∫—Ä–∞—Å–∏–≤—ñ –∫–≤—ñ—Ç–∏,",
                "–ê–ª–µ —Ç–∏ —ó—Ö –Ω–µ –∑—Ä–∏–≤–∞–π!",
                "–ë–æ –∑–∞–Ω–µ—Å–µ–Ω—ñ –¥–æ –∫–Ω–∏–≥–∏,",
                "–í —è–∫—ñ–π –ø—Ä–∏—Ä–æ–¥–Ω–∏–π —Å–∫–∞—Ä–±.",
                "–ö—Ä–∞—â–µ –∑–±–µ—Ä–µ–∂–∏ –ø—Ä–∏—Ä–æ–¥—É ‚Äî",
                "–ü–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ —Ç–∏ –Ω–µ —Ä–≤–∏,",
                "–Ü –Ω–µ –Ω–∞—Å—Ç—É–ø–∞–π –Ω–æ–≥–æ—é,",
                "–ë–æ –ª–∏—à–∏–ª–æ—Å—å –º–∞–ª–æ —ó—Ö.",
                "–ü–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏ –∑–±–µ—Ä–µ–∂–∏!"
            ]
        }
    },
    en: {
        title: "Save Primroses",
        mainHeading: "Save Primroses!",
        subHeading: "Each flower is a touch of God's creation üå∏",
        saveMessage: "Don't pick ‚Äî preserve!",
        whyImportant: "Why is it important to protect primroses?",
        mainText1: "Primroses are not just beautiful flowers, they are unique God's creations that appear first after the long winter. They purify the air, support the ecosystem and please our eyes. But due to human greed and indifference, these flowers are on the verge of extinction.",
        mainText2: "If we don't act now, these delicate symbols of spring will remain only in photos. Don't buy or pick primroses ‚Äî better admire them in nature. Let's preserve God's beauty together!",
        benefits: "What are the benefits of primroses?",
        forEcosystem: "For ecosystem üåø",
        ecosystemText: "Primroses are an important source of nectar for the first spring insects, especially bees. They help maintain ecosystem balance after winter.",
        forHealth: "For health üå±",
        healthText: "Many primroses have medicinal properties. For example, snowdrops contain substances used in medicine.",
        forSoil: "For soil üåç",
        soilText: "Primroses help retain moisture in the soil and protect it from erosion after snow melts.",
        forSoul: "For soul üíö",
        soulText: "These flowers give us the first spring beauty, lift our spirits and remind us of nature's revival.",
        snowdrop: "Snowdrop",
        snowdropText: "A symbol of purity and hope. One of the first heralds of spring.",
        winterAconite: "Winter Aconite",
        winterAconiteText: "A rare yellow primrose that blooms even in snow.",
        liverleaf: "Liverleaf",
        liverleafText: "A delicate forest flower that needs our protection.",
        video: "Video about primrose beauty",
        videoPlaceholder: "Here will be a video added by Serhii üé•",
        changeTheme: "üåó Change theme",
        footer: "¬© 2025 Save Primroses üå∑ With love for nature and God üíö",
        poem: {
            title: "Primroses",
            text: [
                "Primroses are beautiful flowers,",
                "But please do not pick them!",
                "They're listed in the book",
                "Of natural treasures pure.",
                "Better preserve nature ‚Äî",
                "Leave primroses to grow,",
                "And watch your step with care,",
                "For few of them remain.",
                "Save primroses today!"
            ]
        }
    }
};

function changeLang(lang) {
    const t = translations[lang];
    if (!t) return;

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–Ω–æ–ø–æ–∫
    const uaLangBtn = document.getElementById('uaLang');
    const enLangBtn = document.getElementById('enLang');
    if (uaLangBtn) uaLangBtn.classList.toggle('active', lang === 'ua');
    if (enLangBtn) enLangBtn.classList.toggle('active', lang === 'en');

    const isDark = document.body.classList.contains('dark-theme');

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    const headerTitle = document.querySelector('header h1');
    if (headerTitle) headerTitle.textContent = t.title;

    const mainHeading = document.querySelector('.gradient-text span');
    if (mainHeading) mainHeading.textContent = t.mainHeading;

    const subHeading = document.querySelector('.text-2xl');
    if (subHeading) subHeading.textContent = t.subHeading;

    const saveMessage = document.querySelector('.parallax h2');
    if (saveMessage) saveMessage.textContent = t.saveMessage;

    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) themeToggle.textContent = t.changeTheme;

    const whySection = document.querySelector('main section:first-child h2');
    if (whySection) whySection.textContent = t.whyImportant;

    const benefitsSection = document.querySelector('main section:nth-child(2) h2');
    if (benefitsSection) benefitsSection.textContent = t.benefits;

    const videoSection = document.querySelector('main section:last-child h2');
    if (videoSection) videoSection.textContent = t.video;

    const footerText = document.querySelector('footer p');
    if (footerText) footerText.textContent = t.footer;

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó "–Ø–∫–∞ –∫–æ—Ä–∏—Å—Ç—å –≤—ñ–¥ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç—ñ–≤?"
    const benefitTitles = document.querySelectorAll('.benefit-card h3');
    const benefitTexts = document.querySelectorAll('.benefit-card p');
    if (benefitTitles.length >= 4 && benefitTexts.length >= 4) {
        benefitTitles[0].textContent = t.forEcosystem;
        benefitTitles[1].textContent = t.forHealth;
        benefitTitles[2].textContent = t.forSoil;
        benefitTitles[3].textContent = t.forSoul;
        benefitTexts[0].textContent = t.ecosystemText;
        benefitTexts[1].textContent = t.healthText;
        benefitTexts[2].textContent = t.soilText;
        benefitTexts[3].textContent = t.soulText;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É "–ß–æ–º—É –≤–∞–∂–ª–∏–≤–æ –±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä–≤–æ—Ü–≤—ñ—Ç–∏?"
    const mainTexts = document.querySelectorAll('main section:first-child p');
    if (mainTexts.length >= 2) {
        mainTexts[0].textContent = t.mainText1;
        mainTexts[1].textContent = t.mainText2;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∫–≤—ñ—Ç—ñ–≤
    const flowerCards = document.querySelectorAll('.card');
    if (flowerCards.length >= 4) {
        flowerCards[0].querySelector('h2').textContent = t.snowdrop;
        flowerCards[0].querySelector('p').textContent = t.snowdropText;
        flowerCards[1].querySelector('h2').textContent = t.winterAconite;
        flowerCards[1].querySelector('p').textContent = t.winterAconiteText;
        flowerCards[2].querySelector('h2').textContent = t.liverleaf;
        flowerCards[2].querySelector('p').textContent = t.liverleafText;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ—Ä—à–∞
    const poemTitle = document.querySelector('.benefit-card h2');
    const poemText = document.querySelector('.benefit-card .text-black');
    if (poemTitle && poemText && t.poem) {
        poemTitle.textContent = t.poem.title;
        poemText.innerHTML = t.poem.text.join('<br>');
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è —Ç–µ–º–∏
    if (isDark) {
        document.querySelectorAll('p, h1, h2, h3, span').forEach(el => {
            el.style.color = '#e0e0e0';
        });
    } else {
        document.querySelectorAll('*').forEach(el => {
            if (el.tagName !== 'SCRIPT' && el.tagName !== 'STYLE') {
                el.style.setProperty('color', 'rgba(34, 197, 94, 0.9)', 'important');
            }
        });
    }

    localStorage.setItem('language', lang);
}

// Initialize Particles
tsParticles.load("tsparticles", {
    particles: {
        number: { value: 80 },
        color: { value: "#22c55e" },
        shape: { type: "circle" },
        opacity: { value: 0.5 },
        size: { value: 3 },
        move: {
            enable: true,
            speed: 2,
            direction: "none",
            random: false,
            straight: false,
            outModes: { default: "bounce" }
        },
        links: {
            enable: true,
            color: "#22c55e",
            opacity: 0.3
        }
    },
    interactivity: {
        events: {
            onHover: {
                enable: true,
                mode: "grab"
            }
        },
        modes: {
            grab: {
                distance: 140,
                links: { opacity: 1 }
            }
        }
    }
});